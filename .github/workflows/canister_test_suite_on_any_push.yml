# Name of the workflow, used for identification
name: Canisters Test Suite and Deployment

# Define the events that trigger this workflow
on:
  push:
    branches:
      - main # Trigger the workflow on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger the workflow for pull requests targeting the main branch

# Manage concurrent runs of this workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }} # Unique group based on workflow name and branch
  cancel-in-progress: true # Cancel any in-progress runs in this group when a new run is triggered

jobs:
  test:
    name: Run Canister Test Suite # Name of the job
    runs-on: ubuntu-22.04 # Use Ubuntu 22.04 runner for the job

    steps:
      - name: Checkout Code # Step to check out the repository code
        uses: actions/checkout@v3 # Uses the checkout action to pull code from the repository

      - name: Install DFX # Step to install the DFINITY SDK (DFX)
        run: |
          # Download and run the DFX installation script
          curl -sSL https://sdk.dfinity.org/install.sh | sh
          # Add the DFX binary path to the environment variable for future steps
          echo "export PATH=\$PATH:~/.local/bin" >> $GITHUB_ENV
          # Source the bash profile to make the DFX command available in the current shell
          source ~/.bashrc

      - name: Set Up Environment # Step to set up the DFX identity
        run: |
          # Write the private key for the DFX identity to a temporary file
          echo "${{ secrets.FUEL_DAO_CANISTER_CONTROLLER_PRIVATE_KEY }}" > actions_identity.pem
          # Import the identity using the private key and disable encryption
          dfx identity import --disable-encryption actions actions_identity.pem
          # Remove the temporary private key file for security
          rm actions_identity.pem
          # Use the imported identity for subsequent DFX commands
          dfx identity use actions

      - name: Start Local Replica # Step to start the local DFX replica for development
        run: dfx start --background # Start the DFX local development server in the background

      - name: Create Canister IDs # Step to create canister IDs
        run: dfx canister create --no-wallet backend # Create a canister with the specified name

      - name: Build Backend Canister # Step to build the backend canister
        run: |
          dfx build backend # Build the specified canister
          # Compress the generated WebAssembly file to reduce size
          gzip -f -1 ./target/wasm32-unknown-unknown/release/backend.wasm

      - name: Run Canister Test Suite # Step to run tests for the canister
        run: cargo test # Execute the tests defined in the Rust project

      - name: Stop Local Replica # Step to stop the local DFX replica
        run: dfx stop # Stop the running DFX local development server

  deploy:
    name: Deploy Canister # Name of the deployment job
    runs-on: ubuntu-22.04 # Use Ubuntu 22.04 runner for the job
    needs: test # This job depends on the successful completion of the 'test' job

    steps:
      - name: Checkout Code # Step to check out the repository code
        uses: actions/checkout@v3 # Uses the checkout action to pull code from the repository

      - name: Install DFX # Step to install the DFINITY SDK (DFX)
        run: |
          # Download and run the DFX installation script
          curl -sSL https://sdk.dfinity.org/install.sh | sh
          # Add the DFX binary path to the environment variable for future steps
          echo "export PATH=\$PATH:~/.local/bin" >> $GITHUB_ENV
          # Source the bash profile to make the DFX command available in the current shell
          source ~/.bashrc

      - name: Set Up Environment # Step to set up the DFX identity for deployment
        run: |
          # Write the private key for the DFX identity to a temporary file
          echo "${{ secrets.FUEL_DAO_CANISTER_CONTROLLER_PRIVATE_KEY }}" > actions_identity.pem
          # Import the identity using the private key and disable encryption
          dfx identity import --disable-encryption actions actions_identity.pem
          # Remove the temporary private key file for security
          rm actions_identity.pem
          # Use the imported identity for subsequent DFX commands
          dfx identity use actions

      - name: Deploy Canister to ICP # Step to deploy the canister to the Internet Computer
        env:
          ICP_NETWORK: ic # Specify the network to deploy to (default is 'ic')
        run: dfx deploy backend --network ic # Deploy the backend canister to the specified network

