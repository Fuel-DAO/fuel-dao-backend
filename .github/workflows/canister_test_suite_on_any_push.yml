name: Canisters Test Suite and Deployment # Define the name of the workflow

on:
  push:
    branches:
      - main # Trigger this workflow on pushes to the main branch
  pull_request:
    branches:
      - main # Also trigger this workflow for pull requests targeting the main branch

concurrency: # Manage concurrent runs of this workflow
  group: ${{ github.workflow }}-${{ github.ref }} # Unique group based on workflow name and branch
  cancel-in-progress: true # Cancel any in-progress runs in this group when a new run is triggered

jobs:
  test:
    name: Run Canister Test Suite # Job name
    runs-on: ubuntu-22.04 # Use Ubuntu 22.04 runner

    steps:
      - name: Checkout Code # Check out the repository code
        uses: actions/checkout@v3

      - name: Install Nix
        run: |
          # Install Nix without daemon
          sh <(curl -L https://nixos.org/nix/install) --no-daemon

          # Ensure the Nix profile is correctly linked to the runner's profile
          if [ -L /home/runner/.nix-profile ]; then
            rm /home/runner/.nix-profile
          fi
          ln -s /nix/var/nix/profiles/per-user/runner/profile /home/runner/.nix-profile

          # Source Nix profile (try both user-specific and global paths)
          if [ -f /nix/var/nix/profiles/per-user/runner/profile/etc/profile.d/nix.sh ]; then
            . /nix/var/nix/profiles/per-user/runner/profile/etc/profile.d/nix.sh
          elif [ -f /nix/var/nix/profiles/default/etc/profile.d/nix.sh ]; then
            . /nix/var/nix/profiles/default/etc/profile.d/nix.sh
          else
            echo "Nix profile script not found!"
            exit 1
          fi
      - name: Check Nix Info # Check Nix installation info
        run: nix-shell -p nix-info --run "nix-info -m"

      - name: Cache Nix Packages # Cache Nix packages for faster builds
        uses: rikhuijzer/cache-install@v1.1.4
        with:
          key: nix-${{ hashFiles('default.nix') }}

      - name: Cache Rust Dependencies and DFX Cache # Cache Rust and DFX build outputs
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            .dfx/
          key: rust-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Import DFX Identity # Import DFX identity using secret key
        run: |
          touch actions_identity.pem
          echo "${{ secrets.FUEL_DAO_CANISTER_CONTROLLER_PRIVATE_KEY }}" > actions_identity.pem
          nix-shell --run "dfx identity import --disable-encryption actions actions_identity.pem"
          rm actions_identity.pem
          nix-shell --run "dfx identity use actions"

      - name: Start Local Replica # Start local DFX replica
        run: nix-shell --run "dfx start --background"

      - name: Create Canister IDs # Create canister IDs
        run: nix-shell --run "dfx canister create --no-wallet backend"

      - name: Stop Local Replica # Stop the local DFX replica
        run: nix-shell --run "dfx stop"

      - name: Build Backend Canister # Build backend canister
        run: |
          nix-shell --run "dfx build backend"
          gzip -f -1 ./target/wasm32-unknown-unknown/release/backend.wasm

      - name: Run Canister Test Suite # Run canister tests
        env:
          POCKET_IC_BIN: ${{ github.workspace }}/pocket-ic
        run: nix-shell --run "cargo test"

  deploy:
    name: Deploy Canister # Deployment job
    runs-on: ubuntu-22.04
    needs: test # Depends on test job completion

    steps:
      - name: Checkout Code # Check out repository code
        uses: actions/checkout@v3

      - name: Import DFX Identity # Import DFX identity using secret key
        run: |
          touch actions_identity.pem
          echo "${{ secrets.FUEL_DAO_CANISTER_CONTROLLER_PRIVATE_KEY }}" > actions_identity.pem
          nix-shell --run "dfx identity import --disable-encryption actions actions_identity.pem"
          rm actions_identity.pem
          nix-shell --run "dfx identity use actions"

      - name: Deploy Canister to ICP # Deploy canister to the Internet Computer
        env:
          ICP_NETWORK: ic # Specify the network to deploy to (default is 'ic')
        run: |
          nix-shell --run "dfx deploy backend --network ic"
